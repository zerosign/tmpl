
// ForStatement { children: []Statement, key: Ident, value: Ident, data: Expression }

Content { }

{# all function being declared in template are always returns String #}
{{ func database_template(key: String, value: Value) do }}
{= key =}:
   hosts: {= decode("yaml", value.hosts, pretty=true) =}
   username: {= value.username =}
   password: {= decrypt("", "", value.password) =}
{{ end }}

databases:
{#
  it's being inferred in here that rlookup function returns dictionary/map
#}
{{ for { key: String, value: Value } in rlookup("vault", "") do }}
   {= database_template(key, value) =}
{{ end }}


{{ if rlookup("vault", "athena/env") == "test" do }}

{{ end }}


{{ if rlookup("env", "test/test/test") == "production" do }}

{{ end }}

{{ let data := rlookup("local-env", "test/test/test") }}


{= lookup(data, "test.test[]") =}

{= encode("yaml", lookup(data, "test.test[]")) =}
{= encrypt("ed25519", "vault", encode("yaml", lookup(data, "test.test[]"))) =}
{= encrypt("ed25519", ) =}
